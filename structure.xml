<?xml version="1.0" encoding="UTF-8" standalone="no"?><Packages><Package depth="../../../" display="com.apama.adbc" name="com.apama.adbc"><Type category="Event" name="CommandAck"><Description><![CDATA[The acknowledgement event for Command.]]></Description><Summary><![CDATA[The acknowledgement event for Command.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique request-response matching number.]]></Description><Summary><![CDATA[Unique request-response matching number.]]></Summary><TypeParameters/></Member><Member name="errorMessage" type="string"><Description><![CDATA[Populated with an errorMessage if there is one.]]></Description><Summary><![CDATA[Populated with an errorMessage if there is one.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="QueryDone"><Description><![CDATA[Query is done.  errorMessage is NULL if the query has succeeded, not NULL if an error has occurred.

 See also: StartQuery()

 Dataplayer: <br> - Direction: Correlator to client

 Channel: <verbatim><</verbatim>serviceId<verbatim>></verbatim>.Control]]></Description><Summary><![CDATA[Query is done.  errorMessage is NULL if the query has succeeded, not NULL if an error has occurred.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique id for this query.]]></Description><Summary><![CDATA[Unique id for this query.]]></Summary><TypeParameters/></Member><Member name="errorMessage" type="string"><Description><![CDATA[Blank on success, otherwise the error message.]]></Description><Summary><![CDATA[Blank on success, otherwise the error message.]]></Summary><TypeParameters/></Member><Member name="eventCount" type="integer"><Description><![CDATA[Total number of events sent.]]></Description><Summary><![CDATA[Total number of events sent.]]></Summary><TypeParameters/></Member><Member name="lastEventTime" type="float"><Description><![CDATA[Timestamp of last event.]]></Description><Summary><![CDATA[Timestamp of last event.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Command"><Description><![CDATA[Sent to plugin to perform maintenance operations such as update or delete.

 Response event: CommandAck; errorMessage is blank on success, or otherwise a description of the error]]></Description><Summary><![CDATA[Sent to plugin to perform maintenance operations such as update or delete.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique request-response matching number.]]></Description><Summary><![CDATA[Unique request-response matching number.]]></Summary><TypeParameters/></Member><Member name="operationString" type="string"><Description><![CDATA[Command string (Update, delete, etc.).]]></Description><Summary><![CDATA[Command string (Update, delete, etc.).]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="ResultEvent"><Description><![CDATA[Response to the StartQuery

 These will be sent in order until the number requested, in the rowLimit specified, in the StartQuery has been sent.

 All results will be streamed at once.

 See also: StartQuery()

 Dataplayer: <br> - Direction: Correlator to client]]></Description><Summary><![CDATA[Response to the StartQuery]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique id for this query.]]></Description><Summary><![CDATA[Unique id for this query.]]></Summary><TypeParameters/></Member><Member name="rowId" type="integer"><Description><![CDATA[unique Id for each row This is useful if you ned to rerun a query and dont expect the underlying data to change.]]></Description><Summary><![CDATA[unique Id for each row This is useful if you ned to rerun a query and dont expect the underlying data to change.]]></Summary><TypeParameters/></Member><Member name="row" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The result data.]]></Description><Summary><![CDATA[The result data.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Store"><Description><![CDATA[A specialised simpler kind of command that just populates a new row with values]]></Description><Summary><![CDATA[A specialised simpler kind of command that just populates a new row with values]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><TypeParameters/></Member><Member name="tableName" type="string"><TypeParameters/></Member><Member name="row" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><TypeParameters/></Member></Type><Type category="Event" name="StartQuery"><Description><![CDATA[Sent to plugin to start a database query.

 See also: QueryStatus(), ResultSchema(), ResultEvent()

 Response: QueryStatus(), ResultSchema(), ResultEvent()

 Dataplayer: <br> - Direction: Client to correlator.]]></Description><Summary><![CDATA[Sent to plugin to start a database query.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique id for this query.]]></Description><Summary><![CDATA[Unique id for this query.]]></Summary><TypeParameters/></Member><Member name="serviceId" type="string"><Description><![CDATA[The service id, Adapter channel name.]]></Description><Summary><![CDATA[The service id, Adapter channel name.]]></Summary><TypeParameters/></Member><Member name="databaseId" type="integer"><Description><![CDATA[Database connection id.]]></Description><Summary><![CDATA[Database connection id.]]></Summary><TypeParameters/></Member><Member name="query" type="string"><Description><![CDATA[Query to run (either query string or name).]]></Description><Summary><![CDATA[Query to run (either query string or name).]]></Summary><TypeParameters/></Member><Member name="returnType" type="string"><Description><![CDATA[Return Event Type should be one of: Native, Historical, ResultEvent, ResultEventHetero.]]></Description><Summary><![CDATA[Return Event Type should be one of: Native, Historical, ResultEvent, ResultEventHetero.]]></Summary><TypeParameters/></Member><Member name="eventType" type="string"><Description><![CDATA[Event type (name) for use in mapping rules, needed when using Native returnType.]]></Description><Summary><![CDATA[Event type (name) for use in mapping rules, needed when using Native returnType.]]></Summary><TypeParameters/></Member><Member name="backtest" type="boolean"><Description><![CDATA[Indicates Query is being used for backtest.

 <pre> This requires:<br> 1. Only one can be running per database per plugin. <br> 2. All queries must be time sorted. <br> 3. The plugin must be able to identify the time attribute <br> for all types and possible tie breaker attribute.</pre>]]></Description><Summary><![CDATA[Indicates Query is being used for backtest.]]></Summary><TypeParameters/></Member><Member name="statusFrequency" type="float"><Description><![CDATA[Generate a status event every n seconds. If n <= 0.0 no status event is generated.]]></Description><Summary><![CDATA[Generate a status event every n seconds. If n <= 0.0 no status event is generated.]]></Summary><TypeParameters/></Member><Member name="backtestSpeed" type="float"><Description><![CDATA[Speed for back testing: <= 0.0, as fast as possible, > 0.0 -> some multiple of playback speed.]]></Description><Summary><![CDATA[Speed for back testing: <= 0.0, as fast as possible, > 0.0 -> some multiple of playback speed.]]></Summary><TypeParameters/></Member><Member name="timeColumn" type="string"><Description><![CDATA[Column to use for backtest time attribute, not needed if column name is "time".]]></Description><Summary><![CDATA[Column to use for backtest time attribute, not needed if column name is "time".]]></Summary><TypeParameters/></Member><Member name="preparedQueryId" type="integer"><Description><![CDATA[PreparedQuery to run.]]></Description><Summary><![CDATA[PreparedQuery to run.]]></Summary><TypeParameters/></Member><Member name="inputParameters" type="sequence"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[Input parameters for preparedQuery.]]></Description><Summary><![CDATA[Input parameters for preparedQuery.]]></Summary><TypeParameters/></Member><Member name="extraParams" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="string"/></Parameters><Description><![CDATA[This is currently a container to allow additional information in the future.]]></Description><Summary><![CDATA[This is currently a container to allow additional information in the future.]]></Summary><TypeParameters/></Member></Type></Package></Packages>