<?xml version="1.0" encoding="UTF-8" standalone="no"?><Packages><Package depth="../../../" display="com.apama.adbc" name="com.apama.adbc"><Type category="Event" name="Commit"><Description><![CDATA[Send this to the transport to explicitly commit any statements executed on this chain (=JDBC connection) since the last commit.

 This cannot be used if the transport is using the JDBC autoCommit mode, which commits after every statement.

 For example to periodically commit:

 <pre>
	on all wait(5.0) { send Commit(integer.incrementCounter("jdbc")) to "JDBC"; }
</pre>]]></Description><Summary><![CDATA[Send this to the transport to explicitly commit any statements executed on this chain (=JDBC connection) since the last commit.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique id identifying the request.]]></Description><Summary><![CDATA[Unique id identifying the request.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="ResultSchema"><Description><![CDATA[Event in response to the StartQuery event to indicate the result's schema.

 Note: This event will be sent before the first ResultEvent and only if ReturnType is set to ResultEvent.

 See also: StartQuery()

 Dataplayer: <br> - Direction: Correlator to client

 Channel: <verbatim><</verbatim>serviceId<verbatim>></verbatim>.Control]]></Description><Summary><![CDATA[Event in response to the StartQuery event to indicate the result's schema.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique id for this request.]]></Description><Summary><![CDATA[Unique id for this request.]]></Summary><TypeParameters/></Member><Member name="fieldOrder" type="sequence"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[The order of the fields in the schema.]]></Description><Summary><![CDATA[The order of the fields in the schema.]]></Summary><TypeParameters/></Member><Member name="fieldTypes" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="string"/></Parameters><Description><![CDATA[The types of the fields in the schema.]]></Description><Summary><![CDATA[The types of the fields in the schema.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="CommitDone"><Description><![CDATA[Sent in response to a Commit event when it has completed, successfully or unsuccessfully.

 Not sent if a commit is made through some other mechanism.

 Note that if there's an error it's written to the correlator log so there may be no need to listen for this event explicitly.]]></Description><Summary><![CDATA[Sent in response to a Commit event when it has completed, successfully or unsuccessfully.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique id identifying the request.]]></Description><Summary><![CDATA[Unique id identifying the request.]]></Summary><TypeParameters/></Member><Member name="errorDetails" type="optional"><Parameters><Parameter package="com.apama.adbc" type="SQLErrorDetails"/></Parameters><Description><![CDATA[Provides access to details such as the "message" and "isTransientOrRecoverable". Use an ifpresent statement to detect if there was an error and to extract the details.]]></Description><Summary><![CDATA[Provides access to details such as the "message" and "isTransientOrRecoverable". Use an ifpresent statement to detect if there was an error and to extract the details.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="SQLStatementDone"><Description><![CDATA[Sent when a statement has finished executing, either successfully or unsuccessfully.]]></Description><Summary><![CDATA[Sent when a statement has finished executing, either successfully or unsuccessfully.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique id identifying the request.]]></Description><Summary><![CDATA[Unique id identifying the request.]]></Summary><TypeParameters/></Member><Member name="rows" type="integer"><Description><![CDATA[Number of rows successfully returned (for queries) or updated (for update statements). Zero if nothing was done. This is especially useful for detecting if there was an error that partially completed before it failed.]]></Description><Summary><![CDATA[Number of rows successfully returned (for queries) or updated (for update statements). Zero if nothing was done. This is especially useful for detecting if there was an error that partially completed before it failed.]]></Summary><TypeParameters/></Member><Member name="error" type="boolean"><Description><![CDATA[True if there was a partial or complete failure (note that some results may have been returned/rows updates - see "rows" to find out).]]></Description><Summary><![CDATA[True if there was a partial or complete failure (note that some results may have been returned/rows updates - see "rows" to find out).]]></Summary><TypeParameters/></Member><Member name="errorDetails" type="optional"><Parameters><Parameter package="com.apama.adbc" type="SQLErrorDetails"/></Parameters><Description><![CDATA[Provides access to details such as the "message" and "isTransientOrRecoverable". Use an ifpresent statement to detect if there was an error and to extract the details.]]></Description><Summary><![CDATA[Provides access to details such as the "message" and "isTransientOrRecoverable". Use an ifpresent statement to detect if there was an error and to extract the details.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Store"><Description><![CDATA[A specialised simpler kind of command that just populates a new row with values]]></Description><Summary><![CDATA[A specialised simpler kind of command that just populates a new row with values]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><TypeParameters/></Member><Member name="tableName" type="string"><TypeParameters/></Member><Member name="row" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><TypeParameters/></Member></Type><Type category="Event" name="ResultSetRow"><Description><![CDATA[Individual row from a ResultSet. Zero or more are sent in response to a Statement.]]></Description><Summary><![CDATA[Individual row from a ResultSet. Zero or more are sent in response to a Statement.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique id identifying the request]]></Description><Summary><![CDATA[Unique id identifying the request]]></Summary><TypeParameters/></Member><Member name="rowId" type="integer"><Description><![CDATA[unique Id for each row This is useful if you ned to rerun a query and don't expect the underlying data to change.]]></Description><Summary><![CDATA[unique Id for each row This is useful if you ned to rerun a query and don't expect the underlying data to change.]]></Summary><TypeParameters/></Member><Member name="row" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The row data, keyed by column name.]]></Description><Summary><![CDATA[The row data, keyed by column name.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="SQLStatement"><Description><![CDATA[Send this event to the JDBC connectivity plugin to execute a JDBC Statement (or PreparedStatement).

 This can be used for both queries and update commands.

 If autoCommit is not enabled for this JDBCTransport instance you need to request a commit using either #withCommit() method or by later sending a Commit event.]]></Description><Summary><![CDATA[Send this event to the JDBC connectivity plugin to execute a JDBC Statement (or PreparedStatement).]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends><Reference package="com.apama.adbc" type="SQLStatement"/></Sends><Listens/><Spawns/><Member name="messageId" type="integer"><TypeParameters/></Member><Member name="sql" type="sequence"><Parameters><Parameter type="string"/></Parameters><TypeParameters/></Member><Member name="parameterBatches" type="sequence"><Parameters><Parameter type="dictionary"><Parameters><Parameter type="integer"/><Parameter type="any"/></Parameters></Parameter></Parameters><TypeParameters/></Member><Member name="extraParams" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><TypeParameters/></Member><Action name="withResultsInOneEvent" staticNature=""><Description><![CDATA[Delivers all results in a single SmallResultsSet events instead of one XXX event per row. It is mandatory to specify a maxRows value when using this to limit the size of this event, since large Apama events are not recommended.]]></Description><Summary><![CDATA[Delivers all results in a single SmallResultsSet events instead of one XXX event per row. It is mandatory to specify a maxRows value when using this to limit the size of this event, since large Apama events are not recommended.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apama.adbc" type="SQLStatement"/><Parameters><Parameter name="maxRows" type="integer"/></Parameters></Action><Action name="sendTo" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends><Reference package="com.apama.adbc" type="SQLStatement"/></Sends><Listens/><Spawns/><Returns package="com.apama.adbc" type="SQLStatement"/><Parameters><Parameter name="channel" type="string"/></Parameters></Action><Action name="withCommit" staticNature=""><Description><![CDATA[Performs a commit of this and any other statements executed (since the last commit) after this statement completes.]]></Description><Summary><![CDATA[Performs a commit of this and any other statements executed (since the last commit) after this statement completes.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apama.adbc" type="SQLStatement"/></Action><Action name="setQueryTimeoutSecs" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apama.adbc" type="SQLStatement"/><Parameters><Parameter name="v" type="integer"/></Parameters></Action><Action name="setMaxRows" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apama.adbc" type="SQLStatement"/><Parameters><Parameter name="v" type="integer"/></Parameters></Action><Action name="commandBatch" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apama.adbc" type="SQLStatement"/><Parameters><Parameter name="sql" type="sequence"><Parameters><Parameter type="string"/></Parameters></Parameter></Parameters></Action><Action name="simple" staticNature="static "><Description><![CDATA[Execute a single SQL query or update command.]]></Description><Summary><![CDATA[Execute a single SQL query or update command.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apama.adbc" type="SQLStatement"/><Parameters><Parameter name="sql" type="string"/><Parameter name="parameters" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[Parameters for "?" placeholders if the sql is to be sent to the database as a prepared statement (which provides protection against SQL injection attacks and faster execution if the query will be repeated later.

 If no parameters are provided, a non-prepared statement is used. Non-prepared statements are typically quicker for single use (and slower for repeated uses), but you need to be extremely careful to validate and escape any parameters in the sql string to avoid the risk of a SQL injection security vulnerability; if in doubt specify your parameters here rather than manually constructing a SQL string.]]></Description></Parameter></Parameters></Action><Action name="parameterBatch" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apama.adbc" type="SQLStatement"/><Parameters><Parameter name="sql" type="string"/><Parameter name="parameterBatches" type="sequence"><Parameters><Parameter type="dictionary"><Parameters><Parameter type="integer"/><Parameter type="any"/></Parameters></Parameter></Parameters></Parameter></Parameters></Action><Action name="__paramsToDictSingletonList" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="sequence"><Parameters><Parameter type="dictionary"><Parameters><Parameter type="integer"/><Parameter type="any"/></Parameters></Parameter></Parameters></Returns><Parameters><Parameter name="parameters" type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters></Action></Type><Type category="Event" name="SmallResultsSet"><Description><![CDATA[Returned for small ResultSets if the executed statement is expected to return a small set of results, Then they are all returned at once in this event rather than individually in separate ResultSetRows.]]></Description><Summary><![CDATA[Returned for small ResultSets if the executed statement is expected to return a small set of results, Then they are all returned at once in this event rather than individually in separate ResultSetRows.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique id identifying the request]]></Description><Summary><![CDATA[Unique id identifying the request]]></Summary><TypeParameters/></Member><Member name="rows" type="sequence"><Parameters><Parameter type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters></Parameter></Parameters><Description><![CDATA[The result data. This is expected to contain a sequence of multiple rows where each dictionary element contains a rows result data.]]></Description><Summary><![CDATA[The result data. This is expected to contain a sequence of multiple rows where each dictionary element contains a rows result data.]]></Summary><TypeParameters/></Member><Member name="error" type="string"><TypeParameters/></Member></Type><Type category="Event" name="SQLErrorDetails"><Description><![CDATA[Holds detailed information about an error. Included inside events such as SQLStatementDone.]]></Description><Summary><![CDATA[Holds detailed information about an error. Included inside events such as SQLStatementDone.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="message" type="string"><TypeParameters/></Member><Member name="javaExceptionClass" type="string"><TypeParameters/></Member><Member name="isTransientOrRecoverable" type="boolean"><Description><![CDATA[Can be used to determine whether the statement might succeed if retried (note that when this is true the connection is automatically closed and reopened before the next statement is executed).]]></Description><Summary><![CDATA[Can be used to determine whether the statement might succeed if retried (note that when this is true the connection is automatically closed and reopened before the next statement is executed).]]></Summary><TypeParameters/></Member><Member name="vendorErrorCode" type="integer"><Description><![CDATA[The original request that caused this error, in case you wish to immediate retry it.]]></Description><Summary><![CDATA[The original request that caused this error, in case you wish to immediate retry it.]]></Summary><TypeParameters/></Member><Member name="sqlState" type="string"><TypeParameters/></Member><Member name="request" type="any"><TypeParameters/></Member></Type></Package></Packages>