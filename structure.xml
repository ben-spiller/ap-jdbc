<?xml version="1.0" encoding="UTF-8" standalone="no"?><Packages><Package depth="../../../" display="com.apama.adbc" name="com.apama.adbc"><Type category="Event" name="ResultSchema"><Description><![CDATA[Event in response to the StartQuery event to indicate the result's schema.

 Note: This event will be sent before the first ResultEvent and only if ReturnType is set to ResultEvent.

 See also: StartQuery()

 Dataplayer: <br> - Direction: Correlator to client

 Channel: <verbatim><</verbatim>serviceId<verbatim>></verbatim>.Control]]></Description><Summary><![CDATA[Event in response to the StartQuery event to indicate the result's schema.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique id for this query.]]></Description><Summary><![CDATA[Unique id for this query.]]></Summary><TypeParameters/></Member><Member name="fieldOrder" type="sequence"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[The order of the fields in the schema.]]></Description><Summary><![CDATA[The order of the fields in the schema.]]></Summary><TypeParameters/></Member><Member name="fieldTypes" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="string"/></Parameters><Description><![CDATA[The types of the fields in the schema.]]></Description><Summary><![CDATA[The types of the fields in the schema.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Statement"><Description><![CDATA[Execute an SQL statement, which may be a query (resulting some results)]]></Description><Summary><![CDATA[Execute an SQL statement, which may be a query (resulting some results)]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique id identifying this Statement]]></Description><Summary><![CDATA[Unique id identifying this Statement]]></Summary><TypeParameters/></Member><Member name="smallResultSet" type="boolean"><Description><![CDATA[Indicate if the resultSet is expected to be small. If its small it will be returned in one SmallResultsSet event rather than individual ResultSetRows.]]></Description><Summary><![CDATA[Indicate if the resultSet is expected to be small. If its small it will be returned in one SmallResultsSet event rather than individual ResultSetRows.]]></Summary><TypeParameters/></Member><Member name="maxSmallQuerySize" type="integer"><Description><![CDATA[Indicate the max results allowed if this is a smallResultSet. If it turns out there were more results than expected, only the amount up to maxSmallQuerySize will be returned and the statement is stopped after that.]]></Description><Summary><![CDATA[Indicate the max results allowed if this is a smallResultSet. If it turns out there were more results than expected, only the amount up to maxSmallQuerySize will be returned and the statement is stopped after that.]]></Summary><TypeParameters/></Member><Member name="sql" type="string"><Description><![CDATA[SQL to run]]></Description><Summary><![CDATA[SQL to run]]></Summary><TypeParameters/></Member><Member name="parameters" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[Parameters for prepared statement.

 If any parameters are provided, the SQL is sent to the database as a prepared statement allowing for fast repeated execution.

 If no parameters are provided, a non-prepared statement is used. Non-prepared statements are typically quicker for single uses (and slower for repeated uses), but you need to be extremely careful to validate and escape any parameters in the sql string to avoid the risk of a SQL injection security vulnerability; if .]]></Description><Summary><![CDATA[Parameters for prepared statement.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="StatementDone"><Description><![CDATA[Sent when a statement has finished executing, either successfully or unsuccessfully.]]></Description><Summary><![CDATA[Sent when a statement has finished executing, either successfully or unsuccessfully.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique id identifying the Statement that this is in response to]]></Description><Summary><![CDATA[Unique id identifying the Statement that this is in response to]]></Summary><TypeParameters/></Member><Member name="updateCount" type="integer"><Description><![CDATA[Number of rows updated by the Statement]]></Description><Summary><![CDATA[Number of rows updated by the Statement]]></Summary><TypeParameters/></Member><Member name="error" type="optional"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[Empty string if it completed successfully, or an error message if it did not.]]></Description><Summary><![CDATA[Empty string if it completed successfully, or an error message if it did not.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Store"><Description><![CDATA[A specialised simpler kind of command that just populates a new row with values]]></Description><Summary><![CDATA[A specialised simpler kind of command that just populates a new row with values]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><TypeParameters/></Member><Member name="tableName" type="string"><TypeParameters/></Member><Member name="row" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><TypeParameters/></Member></Type><Type category="Event" name="ResultSetRow"><Description><![CDATA[Individual row from a ResultSet. Zero or more are sent in response to a Statement.]]></Description><Summary><![CDATA[Individual row from a ResultSet. Zero or more are sent in response to a Statement.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique id identifying the Statement that this is in response to]]></Description><Summary><![CDATA[Unique id identifying the Statement that this is in response to]]></Summary><TypeParameters/></Member><Member name="rowId" type="integer"><Description><![CDATA[unique Id for each row This is useful if you ned to rerun a query and don't expect the underlying data to change.]]></Description><Summary><![CDATA[unique Id for each row This is useful if you ned to rerun a query and don't expect the underlying data to change.]]></Summary><TypeParameters/></Member><Member name="row" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The row data, keyed by column name.]]></Description><Summary><![CDATA[The row data, keyed by column name.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="SmallResultsSet"><Description><![CDATA[Returned for small ResultSets if the executed statement is expected to return a small set of results, Then they are all returned at once in this event rather than individually in separate ResultSetRows.]]></Description><Summary><![CDATA[Returned for small ResultSets if the executed statement is expected to return a small set of results, Then they are all returned at once in this event rather than individually in separate ResultSetRows.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="messageId" type="integer"><Description><![CDATA[Unique id identifying the Statement that this is in response to]]></Description><Summary><![CDATA[Unique id identifying the Statement that this is in response to]]></Summary><TypeParameters/></Member><Member name="rows" type="sequence"><Parameters><Parameter type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters></Parameter></Parameters><Description><![CDATA[The result data. This is expected to contain a sequence of multiple rows where each dictionary element contains a rows result data.]]></Description><Summary><![CDATA[The result data. This is expected to contain a sequence of multiple rows where each dictionary element contains a rows result data.]]></Summary><TypeParameters/></Member></Type></Package></Packages>