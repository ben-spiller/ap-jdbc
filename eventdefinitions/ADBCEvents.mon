package com.apama.adbc;

//*****************************************************************************
// ADBC (Apama Database Connector) Connectivity Plugin Event Definitions.
//
// Provides definitions for all events sent to or from the ADBC Connecticivity Plugin. 
//
// $Copyright (c) 2013, 2015 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$
// Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
//
//*****************************************************************************


// TODO: rename messageId->requestId
// TODO: document how people should generate unique IDs e.g. integer.incrementCounter("jdbc");

/**
* Event in response to the StartQuery event to indicate the result's schema.
*
* Note: This event will be sent before the first ResultEvent and only if 
* ReturnType is set to ResultEvent.
*
* See also: StartQuery()
*
* Dataplayer: <br>
*     - Direction: Correlator to client
*
*     Channel: <verbatim><</verbatim>serviceId<verbatim>></verbatim>.Control
*/
event ResultSchema {
	/** Unique id for this request. */
	integer messageId;
	/** The order of the fields in the schema. */
	sequence <string> fieldOrder;
	/** The types of the fields in the schema. */
	dictionary <string, string> fieldTypes;
}

/** A specialised simpler kind of command that just populates a new row with values */
event Store {
	integer messageId;
	string tableName;
	dictionary<string, any> row;
}

/** Send this event to the JDBC connectivity plugin to execute a JDBC Statement (or PreparedStatement).

This can be used for both queries and update commands. 

If autoCommit is not enabled for this JDBCTransport instance you need to request a commit using either #withCommit() method 
or by later sending a Commit event. 
*/
event SQLStatement 
{
	// TODO: mark these private so users only interact with them with the EPL actions 
	integer messageId;
	sequence<string> sql;
	sequence<dictionary<integer, any>> parameterBatches;
	dictionary<string, any> extraParams; 
	
	// Static constructors
	
	/** Execute a single SQL query or update command. 
	
	@param parameters Parameters for "?" placeholders if the sql is to be sent to the database as a prepared statement 
		(which provides protection against SQL injection attacks and faster execution if the query will be repeated later. 
		
		If no parameters are provided, a non-prepared statement is used. Non-prepared statements are typically quicker 
		for single use (and slower for repeated uses), but you need to be extremely careful to validate and escape 
		any parameters in the sql string to avoid the risk of a SQL injection security vulnerability; if in doubt specify 
		your parameters here rather than manually constructing a SQL string. 
	*/
	static action simple(string sql, sequence<any> parameters) returns SQLStatement
	{
		return SQLStatement(integer.incrementCounter("jdbc"), [sql], __paramsToDictSingletonList(parameters), new dictionary<string, any>);
	}

	static action commandBatch(sequence<string> sql) returns SQLStatement
	{
		return SQLStatement(integer.incrementCounter("jdbc"), sql, new sequence<dictionary<integer, any>>, new dictionary<string, any>);
	}

	static action parameterBatch(string sql, sequence<dictionary<integer, any>> parameterBatches) returns SQLStatement
	{
		return SQLStatement(integer.incrementCounter("jdbc"), [sql], parameterBatches, new dictionary<string, any>);
	}
	
	static action __paramsToDictSingletonList(sequence<any> parameters) returns sequence<dictionary<integer, any>>
	{
		if (parameters.size() = 0) { return new sequence<dictionary<integer, any>>; }
		dictionary<integer, any> result := new dictionary<integer, any>; 
		integer i := 0;
		while (i < parameters.size())
		{
			result[i+1] := parameters[i];
			i := i+1;
		}
		return [result];
	}
	
	// Methods for fluent builder API 
	
	/** Delivers all results in a single SmallResultsSet events instead of one XXX event per row. 
	It is mandatory to specify a maxRows value when using this to limit the size of this event, since large Apama events are not recommended. */
	action withResultsInOneEvent(integer maxRows) returns SQLStatement { extraParams["resultsInOneEvent"] := true; return setMaxRows(maxRows); }

	/** Performs a commit of this and any other statements executed (since the last commit) after this statement completes. 
	*/
	action withCommit() returns SQLStatement { extraParams["commit"] := true; return self; }

	action setMaxRows(integer v) returns SQLStatement { extraParams["maxRows"] := v; return self; }
	action setQueryTimeoutSecs(integer v) returns SQLStatement { extraParams["queryTimeoutSecs"] := v; return self; }
	
	// Providing send as a fluent method allows us to send and listen for the messageId in a consie one-liner
	action sendTo(string channel) returns SQLStatement { send self to channel; return self; }
}



/** Returned for small ResultSets
* if the executed statement is expected to return a small set of results,
* Then they are all returned at once in this event
* rather than individually in separate ResultSetRows.
*/ 
event SmallResultsSet{
	/** Unique id identifying the request */
	integer messageId;
	
	/** The result data. 
	* This is expected to contain a sequence of multiple rows where
	* each dictionary element contains a rows result data.
	*/	
	sequence<dictionary<string,any>> rows;
	
	string error; // TODO: populate this so there's no need to listen for StatementDone
}

/** Individual row from a ResultSet. Zero or more are sent in response to a Statement. */
event ResultSetRow {
	/** Unique id identifying the request */
	integer messageId;
	/** unique Id for each row
	* This is useful if you ned to rerun a query and don't 
	* expect the underlying data to change.
	*/
	integer rowId;
	/** The row data, keyed by column name. */
	dictionary <string, any> row;
}

/** Holds detailed information about an error. Included inside events such as SQLStatementDone.
*/
event SQLErrorDetails
{
	string message;
	string javaExceptionClass;
	/** 
	Can be used to determine whether the statement might succeed if retried (note that when this is true the 
	connection is automatically closed and reopened before the next statement is executed). 
	*/
	boolean isTransientOrRecoverable;
	/** The original request that caused this error, in case you wish to immediate retry it.*/
	
	integer vendorErrorCode;
	string sqlState;
	
	any request;
}

/** Sent when a statement has finished executing, either successfully or unsuccessfully. 
*/
event SQLStatementDone 
{
	/** Unique id identifying the request. */
	integer messageId;

	/** Number of rows successfully returned (for queries) or updated (for update statements). Zero if nothing was done. 
	This is especially useful for detecting if there was an error that partially completed before it failed. */
	integer rows;

	/** True if there was a partial or complete failure (note that some results may have been returned/rows updates - see "rows" to find out). */
	boolean error; // this boolean exists only to allow hypertree matching 

	/** Provides access to details such as the "message" and "isTransientOrRecoverable". 
	Use an ifpresent statement to detect if there was an error and to extract the details. 
	*/
	optional<SQLErrorDetails> errorDetails;
}

/** Send this to the transport to explicitly commit any statements executed on this chain (=JDBC connection) since the last commit. 

This cannot be used if the transport is using the JDBC autoCommit mode, which commits after every statement. 

For example to periodically commit:

<code>
	on all wait(5.0) { send Commit(integer.incrementCounter("jdbc")) to "JDBC"; }
</code>
*/
event Commit
{
	/** Unique id identifying the request. */
	integer messageId;
	
	// TODO: if we want an action (not sure): static action sendTo(string channel) { ... } 
}

/** Sent in response to a Commit event when it has completed, successfully or unsuccessfully. 

Not sent if a commit is made through some other mechanism. 

Note that if there's an error it's written to the correlator log so there may be no need to listen for this event explicitly.  
*/
event CommitDone
{
	/** Unique id identifying the request. */
	integer messageId;

	/** Provides access to details such as the "message" and "isTransientOrRecoverable". 
	Use an ifpresent statement to detect if there was an error and to extract the details. 
	*/
	optional<SQLErrorDetails> errorDetails;
}