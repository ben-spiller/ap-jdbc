package com.apama.adbc;

//*****************************************************************************
// ADBC (Apama Database Connector) Connectivity Plugin Event Definitions.
//
// Provides definitions for all events sent to or from the ADBC Connecticivity Plugin. 
//
// $Copyright (c) 2013, 2015 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$
// Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
//
//*****************************************************************************

////////////////////////////////////////////////////////////////////////////////
//
// Query events
//
////////////////////////////////////////////////////////////////////////////////

/**
* Sent to plugin to start a database query.
*
* See also: QueryStatus(), ResultSchema(), ResultEvent()
*
* Response: QueryStatus(), ResultSchema(), ResultEvent()
*
* Dataplayer: <br>
*     - Direction: Client to correlator.
*/
event StartQuery {
	/** Unique id for this query. */
	integer messageId;
	/** Query to run (either query string or name). */
	string query;		
}

/**
* Response to the StartQuery
*
* These will be sent in order until the number requested, in the rowLimit
* specified, in the StartQuery has been sent.
*
* All results will be streamed at once.
*
* See also: StartQuery()
*
* Dataplayer: <br>
*     - Direction: Correlator to client
*/
event ResultEvent {
	/** Unique id for this query. */
	integer messageId;
	/** unique Id for each row
	* This is useful if you ned to rerun a query and dont 
	* expect the underlying data to change.
	*/
	integer rowId;
	/** The result data. */
	dictionary <string, any> row;
}

/**
* Query is done.  errorMessage is NULL if the query has succeeded, not NULL if an
* error has occurred.
* 
* See also: StartQuery()
*
* Dataplayer: <br>
*     - Direction: Correlator to client
*
*     Channel: <verbatim><</verbatim>serviceId<verbatim>></verbatim>.Control
*/
event QueryDone {
	/** Unique id for this query. */
	integer messageId;
	/** Blank on success, otherwise the error message. */
	string errorMessage;
	/** Total number of events sent. */
	integer eventCount;
	/** Timestamp of last event. */
	float lastEventTime;
}

/**
* Sent to plugin to perform maintenance operations such as update or delete.
*
* Response event: CommandAck; errorMessage is blank on success, or
* otherwise a description of the error
*/
event Command {
	/** Unique request-response matching number. */
	integer messageId;
	/** Command string (Update, delete, etc.). */
	string operationString;
}

/**
* The acknowledgement event for Command.
*/
event CommandAck
{
	/** Unique request-response matching number. */
	integer messageId;
	/** Populated with an errorMessage if there is one. */
	string errorMessage;
}


////////////////////////////////////////////////////////////////////////////////
//
// Store events
//
////////////////////////////////////////////////////////////////////////////////

/** A specialised simpler kind of command that just populates a new row with values */
event Store {
	integer messageId;
	string tableName;
	dictionary<string, any> row;
}


/** Execute an SQL statement */
event Statement {
	/** Unique id identifying this Statement */
	integer messageId;
	/** SQL to run */
	string sql;

	// TODO - parameters for prepared statement
}

/** Individual row from a ResultSet. Zero or more are sent in response to a Statement. */
event ResultSetRow {
	/** Unique id identifying the Statement that this is in response to */
	integer messageId;
	/** unique Id for each row
	* This is useful if you ned to rerun a query and dont 
	* expect the underlying data to change.
	*/
	integer rowId;
	/** The result data. */
	dictionary <string, any> row;
}

/** Response to Statement
event StatementDone {
	/** Unique id identifying the Statement that this is in response to */
	integer messageId;

	/** Number of rows updated by the Statement */
	integer updateCount;

	// TODO - more sophisticated error reporting
	optional<string> error;
}
